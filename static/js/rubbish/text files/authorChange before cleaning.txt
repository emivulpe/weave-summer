var currentStep = 0; // Stores the current step you're on. 0 means initial state.
var csrftoken = getCookie('csrftoken');
var direction = "next";
var last_direction = "next";
var exampleName = "";


$("#btn_prev").css('visibility', 'hidden');
$("#btn_reset").css('visibility', 'hidden');

$('#create_example_button').click(function(){
    exampleName = $('#example_name').val()
    var request = $.post("/weave/create_example/", {
        'example_name': exampleName,
        'number_of_panels': $('#number_of_panels').val(),
        'csrfmiddlewaretoken': csrftoken,
    });
    request.done(function(outcome) { // Extract a list of the relevant groups
        if ("error" in outcome) {
            BootstrapDialog.alert('Please enter a valid example name and a valid number of panels');
        } 
        else if ("disallowed" in outcome){
            BootstrapDialog.alert('Please select a different name for your example because there is an example with your selected name!');
        }
        else {
            $('#plan_modal').modal('hide');
            $("#example_name_label").html(exampleName);
            var number_of_panels = parseInt($("#number_of_panels").val());
            var panel_width = $("#panel_container").width()/number_of_panels;
            console.log(panel_width  +" wew " + $("#panel_container").width());
            for (i = 0; i < number_of_panels; i++) {
                $("#example_panels").append('<th id = "panel_area_' + i + '" class = "panel" valign="top" style = " width:' + panel_width + 'px;"><div id = "area_container' + i + '" class="panel" style="margin:0px; float: left;word-wrap:break-word;overflow-y:auto; overflow-x:hidden; width:' + panel_width + 'px;"><textarea id = "area' + i + '" class="panel" style = "width:' + (panel_width-20) + 'px;"></textarea></div></th>');
            }
            $("#panel_container" ).colResizable({ disable : true });

            var exampleEditors = [];

            $('textarea[id^="area"]').each(function(index) {
                //console.log($(this).attr("id"));
                //$(this).width($("#panel_container").width()/number_of_panels);
                //$(this).width($("#panel_area_" + index).width());
                //$("th#panel_area_" + index).css("width",$("#panel_container").width()/number_of_panels);
                //$(this).css("width",$("th#panel_area_" + index).width());
                //console.log($(this).width() + " fw " + $("th#panel_area_" + index).width());
                //console.log($(this).attr("id") + "fresd" + $("th#panel_area_" + index).attr("id"));
                $(this).height($("#outer_panel2").height()*0.8);
                exampleEditors[index] = new nicEditor({iconsPath : nicEditorPath,  buttonList : ['save','bold','italic','underline','left','center','right','justify','ol','ul','fontSize','fontFamily','indent','outdent','image','upload','link','unlink','forecolor','bgcolor'],}).panelInstance($(this).attr("id"));                   
            });

            var explanationEditor = new nicEditor({iconsPath : nicEditorPath,buttonList : ['save','bold','italic','underline','left','center','right','justify','ol','ul','fontSize','fontFamily','indent','outdent','image','upload','link','unlink','forecolor','bgcolor']}).panelInstance("explanation_area");


            //Re-init the plugin on the new elements
            $("#panel_container").colResizable({
                liveDrag: true,
                gripInnerHtml: "<div class='grip'></div>",
                draggingClass: "dragging",
                onDrag: function (){
                    $('textarea[id^="area"]').each(function(index) {
                        var editor = nicEditors.findEditor($(this).attr("id"));
                        var content = editor.getContent();
                        //console.log($("#area_container" + index).attr("id"));
                        exampleEditors[index].removeInstance($(this).attr("id"));
                        //$("#panel_area_" + index).height($("#example_panels").height()+"px");
                        $("#area_container" + index).width($("#panel_area_" + index).width() + "px");

                        $(this).width(($("#panel_area_" + index).width() - 20) + "px");
                        updatedEditor = new nicEditor({iconsPath : nicEditorPath,  buttonList : ['save','bold','italic','underline','left','center','right','justify','ol','ul','fontSize','fontFamily','indent','outdent','image','upload','link','unlink','forecolor','bgcolor'],}).panelInstance($(this).attr("id"));   

                        exampleEditors[index] = updatedEditor;
                        
                        
                    });
                }
            });
        }
    });

});


$('#create_question_step').click(function(){
   
    $('#question_modal').modal('hide');
    goToStep("next",true);
    // reset the values of the input fields
    $("#question_text").val("");
    $(".option").each(function(){
        $(this).val("");
    })

});


$("#question_step_close_button").click(function(){
    alert("question closed");
})


// A function defining the actions the student interface needs to undertake at a particular step
function goToStep(direction, question) {

    //alert("in go to" + $("#example_name").text() + "da");
	//save the html in a db (either replace the existing one if there is one or create a new one
	//NOTE: there are multiple panels- ensure you say what html goes for which panel
	
    handleControlVisibility(direction);
	var panel_texts = {}
	// Save the entries for each panel for the step
	$('textarea[id^="area"]').each(function(index) {
		console.log($(this).attr("id"));
        var panelId = $(this).attr("id");
        var panelArea = nicEditors.findEditor(panelId);
        var panelContent = panelArea.getContent();
        panel_texts[panelId] = panelContent;

	});
    $.post("/weave/save_step_texts/", {
            'html': "panelContent",
            'csrfmiddlewaretoken': csrftoken,
            'example_name': exampleName,
            'step_number': currentStep,
            'panel_texts' : JSON.stringify(panel_texts)
    }).done(function() {
        var explanation = "";
        if(question){
            
            explanation = $("#question_text").val();
            alert("question" + explanation);

            //Add the question options if any
            var options = [];
            $(".option_text").each(function(index){
                if($("input:radio[id='multiple_choice_radio_button']").is(":checked")) {
                    options[index] = $(this).val(); 
                    console.log($(this).val() + "OPTION VAL");
                }
                
            })
            //A trick to pass the array with AJAX- it is not possible to pass an array otherwise!
            var options_dict = {'options':options};

            console.log(options_dict['options'] + "OPTIONS DICT");

            //A special request to post the question- create a question etc
            $.post("/weave/save_question/", {
                'question_text': explanation,
                'csrfmiddlewaretoken': csrftoken,
                'example_name': exampleName,
                'step_number':currentStep,
                'options' : JSON.stringify(options_dict)
            }); 

        } 
        else {
            
            var explanationArea = nicEditors.findEditor("explanation_area");    //Save the explanation for this step
            explanation = explanationArea.getContent();
            alert("not question" + explanation);
        }
        $.post("/weave/save_explanation/", {
            'html': explanation,
            'csrfmiddlewaretoken': csrftoken,
            'example_name': exampleName,
            'step_number':currentStep,
        }).done(function() {
          //if it is next 
            //increment the step counter
        //if it is back
            //decrement the counter
        if (direction == "next"){
            currentStep ++;
        }
        else{
            currentStep --;
        }

        //get request to see if there is entry for that step
        //if there is- fill the textarea with it
        //else show an empty text area
        var request = $.get('/weave/get_next_step/', {
            'example_name' : exampleName,
            'step_number' : currentStep
        });
        request.done(function(data) {
            if (!("error" in data)) {
                for (var key in data) {
                  if (data.hasOwnProperty(key)) {

                    console.log(key + 1);
                    console.log(data[key] + 2);
                    console.log($("#"+key).html() + 3);
                    var text_area = nicEditors.findEditor(key);

                    if (key == "explanation_area"){
                        text_area.setContent(data[key]); 
                    }
                    else {
                        if (key == "question"){
                            if (data[key] != ""){
                                $("#question_modal").modal('show');
                                console.log("THIS STEP IS A QUESTION!!!!!!!!");
                            }
                            else{
                                console.log("this is not a question?????????");
                            }
                        }
                        else if (key == "options"){
                            console.log("OPTIOOOOOOOOOOOOOONSSSSSSS");
                        }
                        else {
                            text_area.setContent(data[key]);
                        }
                        
                    }

                    console.log(text_area + 4);
                    
                  }
                }
            }
            else{
                console.log("there was an error");
            }
        });
    });  

    })

}


function handleControlVisibility(direction){
        // Ensure the correct arrows are shown
    if (currentStep == 1 && direction == "back") {
        $("#btn_prev").css('visibility', 'hidden');
    } else {
        $("#btn_prev").css('visibility', 'visible');
        $("#btn_next").css('visibility', 'visible');
    }
    
}

// Reset an example- show only the relevant elements
function doReset() {
    $("*[id^='fragment_']").css("background-color", "transparent");
    $("*[id^='fragment_']").hide();
    $('#explanation').html('');
    $("#btn_prev").css('visibility', 'hidden');
    $("#btn_next").css('visibility', 'visible');
    $("#btn_reset").css('visibility', 'hidden');
    $("#forward_button_label").text('Start');
    $("#forward_button_label").css('cursor', 'pointer');
    $("#forward_button_label").css('color', 'red');
    $("#forward_button_label").css('font-size', '24px');
    $("#next_arrow").hide();


    currentStep = 0;
}


// Use JQuery to pick up when the user pushes the next button.
$('#btn_next').click(function() {
    goToStep("next", false);
    alert("next");
});


// Bind an event to the previous button.
$('#btn_prev').click(function() {
    goToStep("back", false);
    alert("back");
});

// Reset the example on click of the reset button
$('#btn_done').click(function() {
    alert("done clicked");
});

$('#btn_question').click(function(){
    $("#question_modal").modal('show');
});




// Show the dialog for a question
function ShowDialog() {
    $("#overlay").show();
    $("#dialog").css({
        "position": "absolute",
        "top": ((($(window).height() - $("#dialog").outerHeight()) / 2) + $(window).scrollTop() + "px"),
        "left": ((($(window).width() - $("#dialog").outerWidth()) / 2) + $(window).scrollLeft() + "px"),
    });
    $("#dialog").fadeIn(300);

    $("#overlay").unbind("click");
}


// Hide a dialog of a question
function HideDialog() {
    $("#overlay").hide();
    $("#dialog").fadeOut(300);
}

function getCookie(name) {
    var cookieValue = null;
    if (document.cookie && document.cookie != '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = jQuery.trim(cookies[i]);
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) == (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// Specify the shortcut keys for transition between examples
document.onkeydown = function(e) {
    switch (e.keyCode) {
        case 37:
            if (currentStep > 0 && $("#dialog").is(':hidden')) {
                goToStep("back",false);
            }
            break;
        case 39:
            if (currentStep <= totalSteps && $("#dialog").is(':hidden')) { //if the action is question that hasn't been asked yet, i.e. the explanation_dict is still empty for that step
                goToStep("next",false);
            }
            break;
    }
};

// A function to escape HTML to ensure the correct text for the examples appears
function escapeHtml(unsafe) {
    if (unsafe == null) {
        return "";
    }
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}